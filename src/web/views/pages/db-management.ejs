<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'DB 관리 - Aimdot.dev' %></title>
    
    <!-- Favicon -->
    <link rel="icon" href="https://i.imgur.com/Sd8qK9c.gif" type="image/gif">
    
    <!-- CSS -->
    <link rel="stylesheet" href="/css/common.css">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Meta Tags -->
    <meta name="description" content="Aimdot.dev Discord Bot 데이터베이스 관리 페이지">
    <meta name="keywords" content="Discord Bot, Aimdot, 데이터베이스관리">
    <meta name="author" content="Aimdot.dev">
    
    <style>
        /* === DB 관리 전용 스타일 === */
        .header {
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .header h1 i {
            color: var(--accent-primary);
        }

        .header p {
            color: var(--text-secondary);
            font-size: 1rem;
        }

        /* 통계 개요 */
        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: all 0.2s;
        }

        .stat-card:hover {
            border-color: var(--accent-primary);
            box-shadow: 0 4px 12px rgba(88, 101, 242, 0.1);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .stat-label {
            font-size: 14px;
            color: var(--text-secondary);
        }

        /* 검색 섹션 */
        .search-section {
            margin-bottom: 24px;
        }

        .search-controls {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            align-items: center;
        }

        .search-input {
            flex: 1;
            min-width: 200px;
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 12px 16px;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .search-input:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(88, 101, 242, 0.1);
        }

        .search-btn {
            background: var(--accent-primary);
            border: none;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

        .search-btn:hover {
            background: var(--accent-hover);
            transform: translateY(-1px);
        }

        .filter-select {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 12px 16px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--accent-primary);
        }

        /* 데이터 테이블 */
        .data-table {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            overflow: hidden;
            margin-bottom: 24px;
        }

        .table-header {
            background: var(--bg-tertiary);
            display: grid;
            grid-template-columns: 200px 100px 100px 120px 100px 100px 150px;
            padding: 16px 20px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 14px;
            border-bottom: 1px solid var(--border-color);
        }

        .table-row {
            display: grid;
            grid-template-columns: 200px 100px 100px 120px 100px 100px 150px;
            padding: 16px 20px;
            border-bottom: 1px solid var(--border-color);
            transition: all 0.2s;
            align-items: center;
        }

        .table-row:last-child {
            border-bottom: none;
        }

        .table-row:hover {
            background: var(--bg-hover);
        }

        .user-cell {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: 2px solid var(--border-color);
        }

        .user-info {
            flex: 1;
            min-width: 0;
        }

        .user-name {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .user-id {
            font-size: 12px;
            color: var(--text-secondary);
            font-family: var(--font-mono);
        }

        .editable-field {
            background: transparent;
            border: 1px solid transparent;
            color: var(--text-primary);
            padding: 6px 10px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
            width: 100%;
            box-sizing: border-box;
        }

        .editable-field:hover {
            background: var(--bg-tertiary);
            border-color: var(--border-color);
        }

        .editable-field:focus {
            outline: none;
            border-color: var(--accent-primary);
            background: var(--bg-tertiary);
            box-shadow: 0 0 0 2px rgba(88, 101, 242, 0.1);
        }

        .save-btn {
            background: var(--success);
            border: none;
            color: white;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
            opacity: 0;
            pointer-events: none;
        }

        .save-btn.show {
            opacity: 1;
            pointer-events: all;
        }

        .save-btn:hover {
            background: var(--discord-green);
            transform: translateY(-1px);
        }

        /* 페이지네이션 */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            margin-top: 24px;
        }

        .pagination-btn {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
        }

        .pagination-btn:hover:not(:disabled) {
            background: var(--bg-hover);
            border-color: var(--accent-primary);
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-btn.active {
            background: var(--accent-primary);
            border-color: var(--accent-primary);
            color: white;
        }

        .pagination-info {
            color: var(--text-secondary);
            font-size: 14px;
            margin: 0 16px;
        }

        /* 로딩 및 빈 상태 */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 60px 20px;
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid var(--border-color);
            border-top: 3px solid var(--accent-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-state p {
            font-size: 16px;
        }

        /* 모달 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s;
        }

        .modal.show {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 24px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 16px;
        }

        .modal-body {
            margin-bottom: 20px;
        }

        .modal-footer {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .modal-btn {
            padding: 10px 20px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .modal-btn.cancel {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
        }

        .modal-btn.cancel:hover {
            background: var(--bg-hover);
        }

        .modal-btn.confirm {
            background: var(--accent-primary);
            border: 1px solid var(--accent-primary);
            color: white;
        }

        .modal-btn.confirm:hover {
            background: var(--accent-hover);
        }

        /* 토스트 알림 */
        .toast {
            position: fixed;
            bottom: 30px;
            right: 280px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            padding: 16px 24px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-large);
            display: flex;
            align-items: center;
            gap: 12px;
            z-index: 1000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease-out;
        }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .toast i {
            color: var(--success);
        }

        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .table-header,
            .table-row {
                grid-template-columns: 1fr;
                gap: 8px;
            }

            .table-header > div:not(:first-child),
            .table-row > div:not(:first-child) {
                display: none;
            }

            .search-controls {
                flex-direction: column;
                align-items: stretch;
            }

            .pagination {
                flex-wrap: wrap;
            }

            .toast {
                right: 20px;
                left: 20px;
            }
        }

        @media (max-width: 480px) {
            .stats-overview {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- 모바일 메뉴 토글 -->
    <button class="mobile-toggle left" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
    </button>
    <button class="mobile-toggle right" onclick="toggleMenu()">
        <i class="fas fa-ellipsis-v"></i>
    </button>

    <!-- 좌측 사이드바 - 사용자 프로필 -->
    <aside class="sidebar-left" id="sidebar-left">
        <div class="sidebar-logo">
            <img src="https://i.imgur.com/IOPA7gL.gif" alt="Aimdot.dev">
            <h2>Aimdot.dev</h2>
        </div>

        <!-- 사용자 프로필 섹션 -->
        <div class="user-profile-section">
            <div class="user-profile-header">
                <img src="<%= user?.avatar || 'https://i.imgur.com/Sd8qK9c.gif' %>" alt="Avatar" class="user-profile-avatar" id="user-avatar">
                <div class="user-profile-info">
                    <div class="user-profile-name" id="user-name"><%= user?.username || '로딩 중...' %></div>
                    <div class="user-profile-role" id="user-role"><%= user?.dashboardRole || '-' %></div>
                </div>
            </div>
            
            <div class="profile-actions">
                <a href="/dashboard" class="profile-btn back">
                    <i class="fas fa-arrow-left"></i>
                    대시보드로 돌아가기
                </a>
            </div>
        </div>
    </aside>

    <!-- 우측 사이드바 - 메뉴 -->
    <aside class="sidebar-right" id="sidebar-right">
        <div class="menu-header">
            <i class="fas fa-bars"></i>
            <span>빠른 메뉴</span>
        </div>

        <div class="menu-section">
            <h3>관리</h3>
            <ul class="menu-list">
                <li class="menu-item">
                    <a href="/dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        대시보드
                    </a>
                </li>
                <li class="menu-item">
                    <a href="/dashboard/servers">
                        <i class="fas fa-server"></i>
                        서버 관리
                    </a>
                </li>
                <li class="menu-item">
                    <a href="/dashboard/db-management" class="active">
                        <i class="fas fa-database"></i>
                        DB 관리
                    </a>
                </li>
                <li class="menu-item">
                    <a href="/dashboard/permissions">
                        <i class="fas fa-user-shield"></i>
                        권한 관리
                    </a>
                </li>
            </ul>

            <h3>기타</h3>
            <ul class="menu-list">
                <li class="menu-item">
                    <a href="/auth/logout">
                        <i class="fas fa-sign-out-alt"></i>
                        로그아웃
                    </a>
                </li>
            </ul>
        </div>
    </aside>

    <!-- 메인 콘텐츠 -->
    <div class="main-content">
        <!-- 헤더 -->
        <div class="header">
            <h1>
                <i class="fas fa-database"></i>
                DB 관리
            </h1>
            <p>사용자 데이터베이스를 조회하고 관리합니다.</p>
        </div>

        <!-- 통계 개요 -->
        <div class="stats-overview">
            <div class="stat-card">
                <div class="stat-value" id="total-users">0</div>
                <div class="stat-label">전체 사용자</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="total-games">0</div>
                <div class="stat-label">총 게임 수</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="avg-winrate">0%</div>
                <div class="stat-label">평균 승률</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="active-users">0</div>
                <div class="stat-label">활성 사용자</div>
            </div>
        </div>

        <!-- 검색 섹션 -->
        <div class="search-section">
            <div class="search-controls">
                <input type="text" class="search-input" id="search-input" placeholder="사용자 이름 또는 Discord ID로 검색...">
                <select class="filter-select" id="tier-filter">
                    <option value="">모든 티어</option>
                    <option value="iron">아이언</option>
                    <option value="bronze">브론즈</option>
                    <option value="silver">실버</option>
                    <option value="gold">골드</option>
                    <option value="platinum">플래티넘</option>
                    <option value="diamond">다이아몬드</option>
                    <option value="master">마스터</option>
                    <option value="grandmaster">그랜드마스터</option>
                    <option value="challenger">챌린저</option>
                </select>
                <button class="search-btn" onclick="searchUsers()" id="search-btn">
                    <i class="fas fa-search"></i>
                    <span>검색</span>
                </button>
            </div>
        </div>

        <!-- 데이터 테이블 -->
        <div class="data-table">
            <div class="table-header">
                <div>사용자</div>
                <div>레벨</div>
                <div>승수</div>
                <div>패수</div>
                <div>승률</div>
                <div>티어</div>
                <div>작업</div>
            </div>
            <div id="users-table-body">
                <div class="loading">
                    <div class="spinner"></div>
                </div>
            </div>
        </div>

        <!-- 페이지네이션 -->
        <div class="pagination" id="pagination">
            <button class="pagination-btn" onclick="changePage(-1)" id="prev-btn">
                <i class="fas fa-chevron-left"></i>
            </button>
            <span class="pagination-info" id="page-info">1 / 1</span>
            <button class="pagination-btn" onclick="changePage(1)" id="next-btn">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <!-- 편집 모달 -->
    <div class="modal" id="edit-modal">
        <div class="modal-content">
            <div class="modal-header">사용자 데이터 편집</div>
            <div class="modal-body">
                <p>사용자의 게임 데이터를 수정할 수 있습니다.</p>
                <div style="margin-top: 16px;">
                    <label style="display: block; margin-bottom: 8px; color: var(--text-secondary);">레벨:</label>
                    <input type="number" id="edit-level" class="search-input" style="width: 100%;">
                </div>
                <div style="margin-top: 16px;">
                    <label style="display: block; margin-bottom: 8px; color: var(--text-secondary);">승수:</label>
                    <input type="number" id="edit-wins" class="search-input" style="width: 100%;">
                </div>
                <div style="margin-top: 16px;">
                    <label style="display: block; margin-bottom: 8px; color: var(--text-secondary);">패수:</label>
                    <input type="number" id="edit-losses" class="search-input" style="width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel" onclick="closeEditModal()">취소</button>
                <button class="modal-btn confirm" onclick="saveUserData()">저장</button>
            </div>
        </div>
    </div>

    <!-- 토스트 알림 -->
    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toast-message">작업이 완료되었습니다.</span>
    </div>

    <!-- JavaScript -->
    <script>
        let currentUser = null;
        let allUsers = [];
        let filteredUsers = [];
        let currentPage = 1;
        let itemsPerPage = 10;
        let editingUserId = null;

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('DB 관리 페이지 초기화 시작');
            try {
                await loadUserInfo();
                await checkPermission();
                await loadStats();
                await loadUsers();
                setupEventListeners();
                console.log('DB 관리 페이지 초기화 완료');
            } catch (error) {
                console.error('페이지 초기화 오류:', error);
                showToast('페이지를 불러오는 중 오류가 발생했습니다.', 'error');
            }
        });

        // 사용자 정보 로드
        async function loadUserInfo() {
            try {
                <% if (user) { %>
                currentUser = <%- JSON.stringify(user) %>;
                document.getElementById('user-name').textContent = currentUser.username;
                document.getElementById('user-role').textContent = currentUser.dashboardRole || 'member';
                document.getElementById('user-avatar').src = currentUser.avatar;
                <% } else { %>
                window.location.href = '/auth/discord';
                <% } %>
            } catch (error) {
                console.error('사용자 정보 로드 실패:', error);
            }
        }

        // 권한 체크
        async function checkPermission() {
            if (!currentUser || !['subadmin', 'admin', 'owner'].includes(currentUser.dashboardRole)) {
                alert('권한이 없습니다.');
                window.location.href = '/dashboard';
                return;
            }
        }

        // 통계 데이터 로드
        async function loadStats() {
            try {
                console.log('API 요청: /dashboard/api/db/stats');
                const response = await fetch('/dashboard/api/db/stats');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('DB 통계 데이터:', data);
                
                // 통계 업데이트
                document.getElementById('total-users').textContent = data.totalUsers || 0;
                document.getElementById('total-games').textContent = data.totalGames || 0;
                document.getElementById('avg-winrate').textContent = `${data.avgWinrate || 0}%`;
                document.getElementById('active-users').textContent = data.activeUsers || 0;
                
            } catch (error) {
                console.error('통계 로드 실패:', error);
                // 기본값 유지
            }
        }

        // 사용자 목록 로드
        async function loadUsers() {
            const searchBtn = document.getElementById('search-btn');
            const tableBody = document.getElementById('users-table-body');
            
            try {
                // 검색 버튼 비활성화
                searchBtn.disabled = true;
                searchBtn.querySelector('i').style.animation = 'spin 1s linear infinite';
                
                // 로딩 표시
                tableBody.innerHTML = '<div class="loading"><div class="spinner"></div></div>';
                
                console.log('API 요청: /dashboard/api/db/users');
                const response = await fetch('/dashboard/api/db/users');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('사용자 목록 데이터:', data);
                allUsers = data.users || [];
                filteredUsers = [...allUsers];
                currentPage = 1;
                renderUsers();
                updatePagination();
                
            } catch (error) {
                console.error('사용자 목록 로드 실패:', error);
                tableBody.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>사용자 목록을 불러오는데 실패했습니다.<br>API 연결을 확인해주세요.</p>
                    </div>
                `;
            } finally {
                // 검색 버튼 활성화
                searchBtn.disabled = false;
                searchBtn.querySelector('i').style.animation = '';
            }
        }

        // 사용자 목록 렌더링
        function renderUsers() {
            const tableBody = document.getElementById('users-table-body');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const usersToShow = filteredUsers.slice(startIndex, endIndex);
            
            if (usersToShow.length === 0) {
                tableBody.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users"></i>
                        <p>검색 결과가 없습니다.</p>
                    </div>
                `;
                return;
            }

            tableBody.innerHTML = usersToShow.map(user => `
                <div class="table-row">
                    <div class="user-cell">
                        <img src="${user.avatar || 'https://i.imgur.com/Sd8qK9c.gif'}" alt="Avatar" class="user-avatar">
                        <div class="user-info">
                            <div class="user-name">${user.username}</div>
                            <div class="user-id">${user.discordId}</div>
                        </div>
                    </div>
                    <div>
                        <span class="editable-field" contenteditable="false">${user.level || 1}</span>
                    </div>
                    <div>
                        <span class="editable-field" contenteditable="false">${user.wins || 0}</span>
                    </div>
                    <div>
                        <span class="editable-field" contenteditable="false">${user.losses || 0}</span>
                    </div>
                    <div>
                        <span>${calculateWinrate(user.wins || 0, user.losses || 0)}%</span>
                    </div>
                    <div>
                        <span>${user.tier || 'unranked'}</span>
                    </div>
                    <div>
                        <button class="save-btn" onclick="openEditModal('${user.discordId}')">
                            <i class="fas fa-edit"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // 승률 계산
        function calculateWinrate(wins, losses) {
            const total = wins + losses;
            if (total === 0) return 0;
            return Math.round((wins / total) * 100);
        }

        // 사용자 검색
        function searchUsers() {
            const searchTerm = document.getElementById('search-input').value.toLowerCase();
            const tierFilter = document.getElementById('tier-filter').value;
            
            filteredUsers = allUsers.filter(user => {
                const matchesSearch = user.username.toLowerCase().includes(searchTerm) ||
                                    user.discordId.includes(searchTerm);
                const matchesTier = !tierFilter || user.tier === tierFilter;
                
                return matchesSearch && matchesTier;
            });
            
            currentPage = 1;
            renderUsers();
            updatePagination();
        }

        // 페이지 변경
        function changePage(direction) {
            const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
            const newPage = currentPage + direction;
            
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                renderUsers();
                updatePagination();
            }
        }

        // 페이지네이션 업데이트
        function updatePagination() {
            const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
            const pageInfo = document.getElementById('page-info');
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            
            pageInfo.textContent = `${currentPage} / ${totalPages}`;
            prevBtn.disabled = currentPage <= 1;
            nextBtn.disabled = currentPage >= totalPages;
        }

        // 편집 모달 열기
        function openEditModal(discordId) {
            const user = allUsers.find(u => u.discordId === discordId);
            if (!user) return;
            
            editingUserId = discordId;
            document.getElementById('edit-level').value = user.level || 1;
            document.getElementById('edit-wins').value = user.wins || 0;
            document.getElementById('edit-losses').value = user.losses || 0;
            
            document.getElementById('edit-modal').classList.add('show');
        }

        // 편집 모달 닫기
        function closeEditModal() {
            document.getElementById('edit-modal').classList.remove('show');
            editingUserId = null;
        }

        // 사용자 데이터 저장
        async function saveUserData() {
            if (!editingUserId) return;
            
            const level = parseInt(document.getElementById('edit-level').value);
            const wins = parseInt(document.getElementById('edit-wins').value);
            const losses = parseInt(document.getElementById('edit-losses').value);
            
            try {
                const response = await fetch('/dashboard/api/db/users/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        discordId: editingUserId,
                        level: level,
                        wins: wins,
                        losses: losses
                    })
                });

                if (response.ok) {
                    showToast('사용자 데이터가 업데이트되었습니다.', 'success');
                    closeEditModal();
                    await loadUsers();
                    await loadStats();
                } else {
                    throw new Error('데이터 업데이트 실패');
                }
            } catch (error) {
                console.error('데이터 업데이트 오류:', error);
                showToast('데이터 업데이트에 실패했습니다.', 'error');
            }
        }

        // 이벤트 리스너 설정
        function setupEventListeners() {
            // 검색 입력 이벤트
            document.getElementById('search-input').addEventListener('input', searchUsers);
            document.getElementById('tier-filter').addEventListener('change', searchUsers);
            
            // 모달 외부 클릭 시 닫기
            document.getElementById('edit-modal').addEventListener('click', (e) => {
                if (e.target === e.currentTarget) {
                    closeEditModal();
                }
            });
            
            // ESC 키로 모달 닫기
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    closeEditModal();
                }
            });
        }

        // 토스트 알림 표시
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const messageElement = document.getElementById('toast-message');
            const icon = toast.querySelector('i');
            
            messageElement.textContent = message;
            
            // 아이콘 변경
            if (type === 'success') {
                icon.className = 'fas fa-check-circle';
                icon.style.color = 'var(--success)';
            } else if (type === 'error') {
                icon.className = 'fas fa-exclamation-triangle';
                icon.style.color = 'var(--error)';
            } else if (type === 'info') {
                icon.className = 'fas fa-info-circle';
                icon.style.color = 'var(--info)';
            }
            
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // 사이드바 토글 (모바일)
        function toggleSidebar() {
            document.getElementById('sidebar-left').classList.toggle('open');
        }

        function toggleMenu() {
            document.getElementById('sidebar-right').classList.toggle('open');
        }

        // 키보드 이벤트
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                document.getElementById('sidebar-left').classList.remove('open');
                document.getElementById('sidebar-right').classList.remove('open');
            }
        });

        // 주기적 업데이트 (60초마다)
        setInterval(async () => {
            try {
                await loadStats();
            } catch (error) {
                console.error('자동 업데이트 실패:', error);
            }
        }, 60000);
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : '대시보드 - Aimdot.dev' %></title>
    <link rel="icon" type="image/gif" href="https://i.imgur.com/Sd8qK9c.gif">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- 공통 Discord 스타일 CSS -->
    <link rel="stylesheet" href="/css/common.css">
    
    <style>
        /* 대시보드 전용 스타일 - dashboard.html과 동일 */
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica', 'Arial', sans-serif;
            background-color: #000000;
            color: #DBDEE1;
            min-height: 100vh;
        }

        /* 로딩 화면 */
        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #000000;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading.hidden {
            display: none;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #1a1a1a;
            border-top-color: #5865F2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* 메인 콘텐츠 */
        .main-content {
            margin-left: 280px;
            margin-right: 250px;
            min-height: 100vh;
        }

        /* 헤더 */
        .header {
            background-color: #000000;
            padding: 16px 24px;
            border-bottom: 1px solid #1a1a1a;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-title {
            font-size: 24px;
            font-weight: 700;
            color: #F2F3F5;
        }

        .mobile-toggle {
            display: none;
            background-color: #5865F2;
            color: #FFFFFF;
            border: none;
            border-radius: 8px;
            padding: 10px;
            cursor: pointer;
        }

        /* 컨텐츠 영역 */
        .content {
            padding: 24px;
        }

        /* 통계 카드 */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s;
        }

        .stat-card:hover {
            border-color: #5865F2;
            transform: translateY(-2px);
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            background-color: #5865F2;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 16px;
            font-size: 24px;
            color: #FFFFFF;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            color: #F2F3F5;
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 14px;
            color: #949BA4;
        }

        /* 봇 제어 패널 */
        .control-panel {
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
        }

        .control-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .control-title {
            font-size: 20px;
            font-weight: 600;
            color: #F2F3F5;
        }

        .bot-status {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 6px 12px;
            background-color: #1a1a1a;
            border-radius: 20px;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #3BA55C;
        }

        .status-dot.offline {
            background-color: #747F8D;
        }

        .control-info {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #B5BAC1;
        }

        .control-info-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .control-info-item i {
            color: #5865F2;
        }

        .control-buttons {
            display: flex;
            gap: 12px;
        }

        .control-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .control-btn.start {
            background-color: #3BA55C;
            color: #FFFFFF;
        }

        .control-btn.start:hover {
            background-color: #2D7D46;
        }

        .control-btn.restart {
            background-color: #FAA61A;
            color: #FFFFFF;
        }

        .control-btn.restart:hover {
            background-color: #C87F0A;
        }

        .control-btn.stop {
            background-color: #ED4245;
            color: #FFFFFF;
        }

        .control-btn.stop:hover {
            background-color: #C53030;
        }

        .control-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* 로그 뷰어 */
        .log-viewer {
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
        }

        .log-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .log-filters {
            display: flex;
            gap: 10px;
        }

        .log-filter {
            padding: 6px 12px;
            background-color: #1a1a1a;
            border: 1px solid #2a2a2a;
            border-radius: 4px;
            color: #B5BAC1;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .log-filter:hover {
            border-color: #5865F2;
        }

        .log-filter.active {
            background-color: #5865F2;
            color: #FFFFFF;
            border-color: #5865F2;
        }

        .log-container {
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 8px;
            padding: 16px;
            max-height: 400px;
            overflow-y: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 13px;
        }

        .log-entry {
            margin-bottom: 8px;
            padding: 8px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .log-entry:hover {
            background-color: #1a1a1a;
        }

        .log-time {
            color: #747F8D;
            margin-right: 8px;
        }

        .log-level {
            font-weight: 600;
            margin-right: 8px;
        }

        .log-level.info { color: #5865F2; }
        .log-level.warn { color: #FAA61A; }
        .log-level.error { color: #ED4245; }

        .log-message {
            color: #DBDEE1;
        }

        /* 서버 목록 */
        .servers-section {
            margin-top: 30px;
        }

        .servers-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .servers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .server-card {
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s;
            cursor: pointer;
        }

        .server-card:hover {
            border-color: #5865F2;
            transform: translateY(-2px);
        }

        .server-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 16px;
        }

        .server-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background-color: #5865F2;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: #FFFFFF;
            overflow: hidden;
        }

        .server-icon img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .server-info {
            flex: 1;
        }

        .server-name {
            font-size: 16px;
            font-weight: 600;
            color: #F2F3F5;
            margin-bottom: 4px;
        }

        .server-id {
            font-size: 12px;
            color: #949BA4;
            font-family: monospace;
        }

        .server-status {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .server-status.joined {
            background-color: #3BA55C;
            color: #FFFFFF;
        }

        .server-status.not-joined {
            background-color: #747F8D;
            color: #FFFFFF;
        }

        .server-stats {
            display: flex;
            gap: 20px;
            font-size: 14px;
            color: #949BA4;
        }

        .server-stat {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        /* 페이지 컨텐츠 관리 */
        .page-content {
            display: none;
        }

        .page-content.active {
            display: block;
        }

        /* 모달 */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 12px;
            padding: 24px;
            max-width: 500px;
            width: 90%;
        }

        .modal-header {
            font-size: 20px;
            font-weight: 600;
            color: #F2F3F5;
            margin-bottom: 20px;
        }

        .modal-body {
            color: #B5BAC1;
            margin-bottom: 24px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .modal-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .modal-btn.cancel {
            background-color: #1a1a1a;
            color: #F2F3F5;
        }

        .modal-btn.cancel:hover {
            background-color: #2a2a2a;
        }

        .modal-btn.confirm {
            background-color: #5865F2;
            color: #FFFFFF;
        }

        .modal-btn.confirm:hover {
            background-color: #4752C4;
        }

        /* 토스트 알림 */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 270px;
            padding: 16px 20px;
            background-color: #000000;
            border: 1px solid #1a1a1a;
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s;
            z-index: 1001;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast.success {
            border-color: #3BA55C;
        }

        .toast.error {
            border-color: #ED4245;
        }

        .toast-icon {
            font-size: 20px;
        }

        .toast.success .toast-icon {
            color: #3BA55C;
        }

        .toast.error .toast-icon {
            color: #ED4245;
        }

        .toast-message {
            color: #F2F3F5;
            font-size: 14px;
        }

        /* 반응형 */
        @media (max-width: 1200px) {
            .main-content {
                margin-left: 280px;
                margin-right: 250px;
            }
        }

        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                margin-right: 0;
            }

            .mobile-toggle {
                display: block;
            }

            .header {
                padding-left: 60px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .toast {
                right: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- 로딩 화면 -->
    <div class="loading" id="loading">
        <div class="spinner"></div>
    </div>

    <!-- 좌측 사이드바 include -->
    <%- include('../partials/sidebar-left') %>

    <!-- 우측 사이드바 include -->
    <%- include('../partials/sidebar-right') %>

    <!-- 메인 컨텐츠 -->
    <main class="main-content">
        <!-- 헤더 -->
        <header class="header">
            <button class="mobile-toggle" onclick="toggleSidebar()">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title" id="page-title">대시보드</h1>
            <button class="mobile-toggle" onclick="toggleMenu()">
                <i class="fas fa-ellipsis-v"></i>
            </button>
        </header>

        <!-- 컨텐츠 영역 -->
        <div class="content">
            <!-- 대시보드 페이지 -->
            <div id="dashboard-page" class="page-content active">
                <!-- 통계 카드 -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-server"></i>
                        </div>
                        <div class="stat-value" id="stat-guilds"><%= typeof stats !== 'undefined' ? stats.guilds || 0 : 0 %></div>
                        <div class="stat-label">서버</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-value" id="stat-users"><%= typeof stats !== 'undefined' ? stats.users || 0 : 0 %></div>
                        <div class="stat-label">사용자</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-hashtag"></i>
                        </div>
                        <div class="stat-value" id="stat-channels"><%= typeof stats !== 'undefined' ? stats.channels || 0 : 0 %></div>
                        <div class="stat-label">채널</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-terminal"></i>
                        </div>
                        <div class="stat-value" id="stat-commands"><%= typeof stats !== 'undefined' ? stats.commands || 0 : 0 %></div>
                        <div class="stat-label">명령어</div>
                    </div>
                </div>

                <!-- 봇 제어 패널 -->
                <div class="control-panel">
                    <div class="control-header">
                        <h2 class="control-title">봇 제어</h2>
                        <div class="bot-status">
                            <div class="status-dot" id="status-dot"></div>
                            <span id="bot-status">오프라인</span>
                        </div>
                    </div>
                    <div class="control-info">
                        <div class="control-info-item">
                            <i class="fas fa-clock"></i>
                            <span>작동 시간: <span id="bot-uptime">0시간 0분</span></span>
                        </div>
                        <div class="control-info-item">
                            <i class="fas fa-microchip"></i>
                            <span>메모리: <span id="bot-memory">0 MB</span></span>
                        </div>
                        <div class="control-info-item">
                            <i class="fas fa-wifi"></i>
                            <span>핑: <span id="bot-ping">0 ms</span></span>
                        </div>
                    </div>
                    <div class="control-buttons">
                        <button class="control-btn start" id="btn-start" disabled>
                            <i class="fas fa-play"></i>
                            시작
                        </button>
                        <button class="control-btn restart" id="btn-restart">
                            <i class="fas fa-sync-alt"></i>
                            재시작
                        </button>
                        <button class="control-btn stop" id="btn-stop">
                            <i class="fas fa-stop"></i>
                            종료
                        </button>
                    </div>
                </div>

                <!-- 최근 로그 -->
                <div class="log-viewer">
                    <div class="log-header">
                        <h2 class="control-title">최근 로그</h2>
                        <div class="log-filters">
                            <button class="log-filter active" data-level="all">전체</button>
                            <button class="log-filter" data-level="info">정보</button>
                            <button class="log-filter" data-level="warn">경고</button>
                            <button class="log-filter" data-level="error">오류</button>
                        </div>
                    </div>
                    <div class="log-container" id="log-container">
                        <!-- 로그 엔트리들이 여기에 표시됩니다 -->
                    </div>
                </div>
            </div>

            <!-- 서버 관리 페이지 -->
            <div id="servers-page" class="page-content">
                <div class="servers-section">
                    <div class="servers-header">
                        <h2 class="control-title">내 서버</h2>
                    </div>
                    <div class="servers-grid" id="servers-grid">
                        <!-- 서버 카드들이 여기에 표시됩니다 -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- 확인 모달 -->
    <div class="modal" id="confirm-modal">
        <div class="modal-content">
            <h3 class="modal-header" id="modal-title">확인</h3>
            <div class="modal-body" id="modal-body">
                정말로 이 작업을 수행하시겠습니까?
            </div>
            <div class="modal-footer">
                <button class="modal-btn cancel" id="modal-cancel">취소</button>
                <button class="modal-btn confirm" id="modal-confirm">확인</button>
            </div>
        </div>
    </div>

    <!-- 토스트 알림 -->
    <div class="toast" id="toast">
        <i class="toast-icon fas fa-check-circle"></i>
        <span class="toast-message" id="toast-message">작업이 완료되었습니다.</span>
    </div>

    <script>
        // 전역 변수 설정
        window.dashboardData = {
            user: <%- JSON.stringify(typeof user !== 'undefined' ? user : null) %>,
            stats: <%- JSON.stringify(typeof stats !== 'undefined' ? stats : {}) %>,
            currentPath: '<%= typeof currentPath !== 'undefined' ? currentPath : '/dashboard' %>'
        };

        // 전역 변수
        let currentUser = window.dashboardData.user;
        let botStatus = null;
        let permissions = null;
        let updateInterval = null;

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', async () => {
            // 로그인 상태 확인
            if (!currentUser) {
                // 세션 확인 시도
                const sessionValid = await checkSession();
                if (!sessionValid) {
                    showToast('로그인이 필요합니다.', 'error');
                    setTimeout(() => {
                        window.location.href = '/auth/discord';
                    }, 2000);
                    return;
                }
            }

            await loadDashboard();
            setupEventListeners();
            
            // 로딩 화면 숨기기
            document.getElementById('loading').classList.add('hidden');
            
            // 5초마다 통계 업데이트
            updateInterval = setInterval(updateStatistics, 5000);
            
            // 10초마다 로그 업데이트
            setInterval(updateLogs, 10000);

            // 5분마다 세션 확인
            setInterval(checkSession, 300000);
        });

        // 세션 확인 함수
        async function checkSession() {
            try {
                const response = await fetch('/auth/check');
                const data = await response.json();
                
                if (!data.authenticated && currentUser) {
                    showToast('세션이 만료되었습니다. 다시 로그인해주세요.', 'error');
                    setTimeout(() => {
                        window.location.href = '/auth/discord';
                    }, 2000);
                    return false;
                }
                
                // 사용자 정보 업데이트
                if (data.user) {
                    currentUser = data.user;
                    window.dashboardData.user = data.user;
                }
                
                return data.authenticated;
            } catch (error) {
                console.error('세션 확인 오류:', error);
                return false;
            }
        }

        // 대시보드 데이터 로드
        async function loadDashboard() {
            try {
                // 이미 사용자 정보가 있으면 통계만 업데이트
                if (currentUser) {
                    await updateStatistics();
                    await updateLogs();
                    return;
                }

                const response = await fetch('/dashboard/api/');
                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/auth/discord';
                        return;
                    }
                    throw new Error('대시보드 로드 실패');
                }
                
                const data = await response.json();
                
                currentUser = data.user;
                permissions = data.permissions;
                botStatus = data.botStatus;
                
                // 봇 상태 표시
                updateBotStatus();
                
                // 통계 업데이트
                await updateStatistics();
                
                // 로그 로드
                await updateLogs();
                
                // 서버 목록 로드
                await loadServers();
                
            } catch (error) {
                console.error('대시보드 로드 오류:', error);
                showToast('대시보드를 로드할 수 없습니다.', 'error');
            }
        }

        // 통계 업데이트
        async function updateStatistics() {
            try {
                const response = await fetch('/api/stats');
                if (!response.ok) return;
                
                const stats = await response.json();
                
                document.getElementById('stat-guilds').textContent = stats.guilds || 0;
                document.getElementById('stat-users').textContent = stats.users || 0;
                document.getElementById('stat-channels').textContent = stats.channels || 0;
                document.getElementById('stat-commands').textContent = stats.commands || 0;
                
                // 봇 정보 업데이트
                if (stats.uptime) {
                    const hours = Math.floor(stats.uptime / 3600000);
                    const minutes = Math.floor((stats.uptime % 3600000) / 60000);
                    const uptimeElement = document.getElementById('bot-uptime');
                    if (uptimeElement) {
                        uptimeElement.textContent = `${hours}시간 ${minutes}분`;
                    }
                }
                
                if (stats.memory) {
                    const memoryMB = Math.round(stats.memory.heapUsed / 1024 / 1024);
                    const memoryElement = document.getElementById('bot-memory');
                    if (memoryElement) {
                        memoryElement.textContent = `${memoryMB} MB`;
                    }
                }
                
                if (stats.ping !== undefined) {
                    const pingElement = document.getElementById('bot-ping');
                    if (pingElement) {
                        pingElement.textContent = `${stats.ping} ms`;
                    }
                }
                
                // 봇 상태 업데이트
                if (stats.online !== undefined) {
                    const statusDot = document.getElementById('status-dot');
                    const statusText = document.getElementById('bot-status');
                    const btnStart = document.getElementById('btn-start');
                    const btnStop = document.getElementById('btn-stop');
                    const btnRestart = document.getElementById('btn-restart');
                    
                    if (stats.online) {
                        statusDot.classList.remove('offline');
                        statusText.textContent = '온라인';
                        if (btnStart) btnStart.disabled = true;
                        if (btnStop) btnStop.disabled = false;
                        if (btnRestart) btnRestart.disabled = false;
                    } else {
                        statusDot.classList.add('offline');
                        statusText.textContent = '오프라인';
                        if (btnStart) btnStart.disabled = false;
                        if (btnStop) btnStop.disabled = true;
                        if (btnRestart) btnRestart.disabled = true;
                    }
                }
                
            } catch (error) {
                console.error('통계 업데이트 오류:', error);
            }
        }

        // 봇 상태 업데이트
        function updateBotStatus() {
            const statusDot = document.getElementById('status-dot');
            const statusText = document.getElementById('bot-status');
            const btnStart = document.getElementById('btn-start');
            const btnStop = document.getElementById('btn-stop');
            const btnRestart = document.getElementById('btn-restart');
            
            if (botStatus && botStatus.status === 'online') {
                statusDot.classList.remove('offline');
                statusText.textContent = '온라인';
                if (btnStart) btnStart.disabled = true;
                if (btnStop) btnStop.disabled = false;
                if (btnRestart) btnRestart.disabled = false;
            } else {
                statusDot.classList.add('offline');
                statusText.textContent = '오프라인';
                if (btnStart) btnStart.disabled = false;
                if (btnStop) btnStop.disabled = true;
                if (btnRestart) btnRestart.disabled = true;
            }
        }

        // 로그 업데이트
        async function updateLogs() {
            try {
                const activeFilter = document.querySelector('.log-filter.active');
                if (!activeFilter) return;
                
                const level = activeFilter.dataset.level;
                const url = level === 'all' 
                    ? '/api/logs?limit=50' 
                    : `/api/logs?limit=50&level=${level}`;
                
                const response = await fetch(url);
                if (!response.ok) return;
                
                const data = await response.json();
                
                const logContainer = document.getElementById('log-container');
                if (!logContainer) return;
                
                logContainer.innerHTML = '';
                
                if (!data.logs || data.logs.length === 0) {
                    logContainer.innerHTML = '<div style="text-align: center; color: #949BA4; padding: 20px;">로그가 없습니다.</div>';
                    return;
                }
                
                data.logs.forEach(log => {
                    const logEntry = document.createElement('div');
                    logEntry.className = 'log-entry';
                    
                    const time = new Date(log.timestamp).toLocaleTimeString('ko-KR');
                    
                    // 중요 정보 마스킹
                    let message = log.message;
                    message = message.replace(/\b\d{17,19}\b/g, '[ID]');
                    message = message.replace(/[A-Za-z0-9_-]{20,}/g, '[TOKEN]');
                    message = message.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g, '[EMAIL]');
                    
                    logEntry.innerHTML = `
                        <span class="log-time">[${time}]</span>
                        <span class="log-level ${log.level}">[${log.level.toUpperCase()}]</span>
                        <span class="log-message">${message}</span>
                    `;
                    
                    logContainer.appendChild(logEntry);
                });
                
                // 스크롤을 맨 아래로
                logContainer.scrollTop = logContainer.scrollHeight;
                
            } catch (error) {
                console.error('로그 업데이트 오류:', error);
            }
        }

        // 서버 목록 로드
        async function loadServers() {
            try {
                const response = await fetch('/api/guilds');
                if (!response.ok) return;
                
                const data = await response.json();
                
                const serversGrid = document.getElementById('servers-grid');
                if (!serversGrid) return;
                
                serversGrid.innerHTML = '';
                
                if (!data.guilds || data.guilds.length === 0) {
                    serversGrid.innerHTML = '<div style="grid-column: 1/-1; text-align: center; color: #949BA4; padding: 40px;">관리 가능한 서버가 없습니다.</div>';
                    return;
                }
                
                data.guilds.forEach(guild => {
                    const serverCard = document.createElement('div');
                    serverCard.className = 'server-card';
                    
                    const iconUrl = guild.icon 
                        ? `https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png`
                        : null;
                    
                    serverCard.innerHTML = `
                        <div class="server-header">
                            <div class="server-icon">
                                ${iconUrl ? `<img src="${iconUrl}" alt="${guild.name}">` : `<i class="fas fa-server"></i>`}
                            </div>
                            <div class="server-info">
                                <div class="server-name">${guild.name}</div>
                                <div class="server-id">${guild.id}</div>
                            </div>
                            <div class="server-status ${guild.botJoined ? 'joined' : 'not-joined'}">
                                ${guild.botJoined ? '봇 참가 중' : '봇 미참가'}
                            </div>
                        </div>
                        <div class="server-stats">
                            <div class="server-stat">
                                <i class="fas fa-crown"></i>
                                <span>${guild.owner ? 'Owner' : '관리자'}</span>
                            </div>
                            ${guild.botJoined ? `
                                <div class="server-stat">
                                    <i class="fas fa-cog"></i>
                                    <span>설정 가능</span>
                                </div>
                            ` : `
                                <div class="server-stat">
                                    <i class="fas fa-plus"></i>
                                    <span>봇 초대 필요</span>
                                </div>
                            `}
                        </div>
                    `;
                    
                    if (guild.botJoined) {
                        serverCard.addEventListener('click', () => {
                            window.location.href = `/dashboard/server/${guild.id}`;
                        });
                    }
                    
                    serversGrid.appendChild(serverCard);
                });
                
            } catch (error) {
                console.error('서버 목록 로드 오류:', error);
            }
        }

        // 사이드바 토글 (좌측)
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar-left');
            if (sidebar) {
                sidebar.classList.toggle('open');
            }
        }

        // 메뉴 토글 (우측)
        function toggleMenu() {
            const menu = document.getElementById('sidebar-right');
            if (menu) {
                menu.classList.toggle('open');
            }
        }

        // 이벤트 리스너 설정
        function setupEventListeners() {
            // 봇 제어 버튼
            const btnRestart = document.getElementById('btn-restart');
            if (btnRestart) {
                btnRestart.addEventListener('click', () => {
                    showConfirmModal('봇 재시작', '봇을 재시작하시겠습니까?', async () => {
                        try {
                            const response = await fetch('/api/bot/restart', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            if (!response.ok) {
                                throw new Error('재시작 요청 실패');
                            }
                            
                            const result = await response.json();
                            showToast(result.message || '봇을 재시작합니다...', 'success');
                        } catch (error) {
                            showToast('봇 재시작 실패', 'error');
                        }
                    });
                });
            }
            
            const btnStop = document.getElementById('btn-stop');
            if (btnStop) {
                btnStop.addEventListener('click', () => {
                    showConfirmModal('봇 종료', '봇을 종료하시겠습니까?', async () => {
                        try {
                            const response = await fetch('/api/bot/stop', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            if (!response.ok) {
                                throw new Error('종료 요청 실패');
                            }
                            
                            const result = await response.json();
                            showToast(result.message || '봇을 종료합니다...', 'success');
                        } catch (error) {
                            showToast('봇 종료 실패', 'error');
                        }
                    });
                });
            }
            
            // 로그 필터
            document.querySelectorAll('.log-filter').forEach(filter => {
                filter.addEventListener('click', () => {
                    document.querySelectorAll('.log-filter').forEach(f => f.classList.remove('active'));
                    filter.classList.add('active');
                    updateLogs();
                });
            });
        }

        // 확인 모달 표시
        function showConfirmModal(title, message, onConfirm) {
            const modal = document.getElementById('confirm-modal');
            if (!modal) return;
            
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-body').textContent = message;
            
            modal.style.display = 'flex';
            
            const confirmBtn = document.getElementById('modal-confirm');
            const cancelBtn = document.getElementById('modal-cancel');
            
            const handleConfirm = () => {
                modal.style.display = 'none';
                onConfirm();
                cleanup();
            };
            
            const handleCancel = () => {
                modal.style.display = 'none';
                cleanup();
            };
            
            const cleanup = () => {
                confirmBtn.removeEventListener('click', handleConfirm);
                cancelBtn.removeEventListener('click', handleCancel);
            };
            
            confirmBtn.addEventListener('click', handleConfirm);
            cancelBtn.addEventListener('click', handleCancel);
        }

        // 토스트 알림 표시
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toast-message');
            const toastIcon = toast.querySelector('.toast-icon');
            
            if (!toast || !toastMessage || !toastIcon) return;
            
            toast.className = `toast ${type}`;
            toastMessage.textContent = message;
            
            if (type === 'success') {
                toastIcon.className = 'toast-icon fas fa-check-circle';
            } else if (type === 'error') {
                toastIcon.className = 'toast-icon fas fa-exclamation-circle';
            } else {
                toastIcon.className = 'toast-icon fas fa-info-circle';
            }
            
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // 페이지 언로드 시 정리
        window.addEventListener('beforeunload', () => {
            if (updateInterval) {
                clearInterval(updateInterval);
            }
        });

        // 윈도우 리사이즈 이벤트
        window.addEventListener('resize', () => {
            if (window.innerWidth > 768) {
                const sidebar = document.getElementById('sidebar-left');
                const menu = document.getElementById('sidebar-right');
                if (sidebar) sidebar.classList.remove('open');
                if (menu) menu.classList.remove('open');
            }
        });

        // ESC 키로 모달과 사이드바 닫기
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                // 모달 닫기
                const modal = document.getElementById('confirm-modal');
                if (modal && modal.style.display === 'flex') {
                    modal.style.display = 'none';
                }
                
                // 모바일에서 사이드바 닫기
                if (window.innerWidth <= 768) {
                    const sidebar = document.getElementById('sidebar-left');
                    const menu = document.getElementById('sidebar-right');
                    if (sidebar) sidebar.classList.remove('open');
                    if (menu) menu.classList.remove('open');
                }
            }
        });

        // 외부 클릭으로 사이드바 닫기 (모바일)
        document.addEventListener('click', (e) => {
            if (window.innerWidth <= 768) {
                const leftSidebar = document.getElementById('sidebar-left');
                const rightSidebar = document.getElementById('sidebar-right');
                const toggleButtons = document.querySelectorAll('.mobile-toggle');
                
                if (leftSidebar && leftSidebar.classList.contains('open') && 
                    !leftSidebar.contains(e.target) && 
                    !Array.from(toggleButtons).some(btn => btn.contains(e.target))) {
                    leftSidebar.classList.remove('open');
                }
                
                if (rightSidebar && rightSidebar.classList.contains('open') && 
                    !rightSidebar.contains(e.target) && 
                    !Array.from(toggleButtons).some(btn => btn.contains(e.target))) {
                    rightSidebar.classList.remove('open');
                }
            }
        });
    </script>
</body>
</html>
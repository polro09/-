<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || '서버 관리 - Aimdot.dev' %></title>
    
    <!-- Favicon -->
    <link rel="icon" href="https://i.imgur.com/Sd8qK9c.gif" type="image/gif">
    
    <!-- CSS -->
    <link rel="stylesheet" href="/css/common.css">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Meta Tags -->
    <meta name="description" content="Aimdot.dev Discord Bot 서버 관리 페이지">
    <meta name="keywords" content="Discord Bot, Aimdot, 서버관리">
    <meta name="author" content="Aimdot.dev">
    
    <style>
        /* === 서버 관리 전용 스타일 === */
        .header {
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .header p {
            color: var(--text-secondary);
            font-size: 1rem;
        }

        /* 서버 섹션 */
        .servers-section {
            margin-bottom: 40px;
        }

        .servers-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .section-title i {
            color: var(--accent-primary);
        }

        .refresh-btn {
            background: var(--accent-primary);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

        .refresh-btn:hover {
            background: var(--accent-hover);
            transform: translateY(-1px);
        }

        .refresh-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* 서버 그리드 */
        .servers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 24px;
        }

        .server-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 24px;
            transition: all 0.3s;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .server-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--accent-primary) 0%, var(--accent-hover) 100%);
            transform: translateX(-100%);
            transition: transform 0.3s;
        }

        .server-card:hover {
            border-color: var(--accent-primary);
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(88, 101, 242, 0.1);
        }

        .server-card:hover::before {
            transform: translateX(0);
        }

        .server-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 16px;
        }

        .server-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-hover) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
            overflow: hidden;
            position: relative;
        }

        .server-icon img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .server-info {
            flex: 1;
            min-width: 0;
        }

        .server-name {
            font-size: 16px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .server-id {
            font-size: 12px;
            color: var(--text-secondary);
            font-family: var(--font-mono);
        }

        .server-status {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .server-status.joined {
            background: rgba(59, 165, 92, 0.2);
            color: var(--success);
        }

        .server-status.not-joined {
            background: rgba(116, 127, 141, 0.2);
            color: var(--text-secondary);
        }

        .server-status i {
            font-size: 8px;
        }

        .server-stats {
            display: flex;
            gap: 20px;
            margin-top: 16px;
            padding-top: 16px;
            border-top: 1px solid var(--border-color);
        }

        .server-stat {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 14px;
            color: var(--text-secondary);
        }

        .server-stat i {
            color: var(--accent-primary);
            font-size: 12px;
        }

        .server-actions {
            margin-top: 16px;
            display: flex;
            gap: 8px;
        }

        .server-btn {
            flex: 1;
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .server-btn:hover {
            background: var(--bg-hover);
            border-color: var(--accent-primary);
        }

        .server-btn.primary {
            background: var(--accent-primary);
            border-color: var(--accent-primary);
            color: white;
        }

        .server-btn.primary:hover {
            background: var(--accent-hover);
        }

        /* 로딩 및 빈 상태 */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 60px 20px;
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid var(--border-color);
            border-top: 3px solid var(--accent-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-state p {
            font-size: 16px;
            margin-bottom: 24px;
        }

        .empty-state .invite-btn {
            background: var(--accent-primary);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

        .empty-state .invite-btn:hover {
            background: var(--accent-hover);
            transform: translateY(-1px);
        }

        /* 통계 카드 */
        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-hover) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 12px;
            font-size: 20px;
            color: white;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 14px;
            color: var(--text-secondary);
        }

        /* 토스트 알림 */
        .toast {
            position: fixed;
            bottom: 30px;
            right: 280px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            padding: 16px 24px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-large);
            display: flex;
            align-items: center;
            gap: 12px;
            z-index: 1000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease-out;
        }

        .toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .toast i {
            color: var(--success);
        }

        /* 반응형 디자인 */
        @media (max-width: 768px) {
            .servers-grid {
                grid-template-columns: 1fr;
            }

            .stats-cards {
                grid-template-columns: repeat(2, 1fr);
            }

            .server-stats {
                flex-direction: column;
                gap: 8px;
            }

            .toast {
                right: 20px;
                left: 20px;
            }
        }

        @media (max-width: 480px) {
            .stats-cards {
                grid-template-columns: 1fr;
            }

            .servers-header {
                flex-direction: column;
                gap: 16px;
                align-items: stretch;
            }
        }
    </style>
</head>
<body>
    <!-- 모바일 메뉴 토글 -->
    <button class="mobile-toggle left" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
    </button>
    <button class="mobile-toggle right" onclick="toggleMenu()">
        <i class="fas fa-ellipsis-v"></i>
    </button>

    <!-- 좌측 사이드바 - 사용자 프로필 -->
    <aside class="sidebar-left" id="sidebar-left">
        <div class="sidebar-logo">
            <img src="https://i.imgur.com/IOPA7gL.gif" alt="Aimdot.dev">
            <h2>Aimdot.dev</h2>
        </div>

        <!-- 사용자 프로필 섹션 -->
        <div class="user-profile-section">
            <div class="user-profile-header">
                <img src="<%= user?.avatar || 'https://i.imgur.com/Sd8qK9c.gif' %>" alt="Avatar" class="user-profile-avatar" id="user-avatar">
                <div class="user-profile-info">
                    <div class="user-profile-name" id="user-name"><%= user?.username || '로딩 중...' %></div>
                    <div class="user-profile-role" id="user-role"><%= user?.dashboardRole || '-' %></div>
                </div>
            </div>
            
            <div class="profile-actions">
                <a href="/dashboard" class="profile-btn back">
                    <i class="fas fa-arrow-left"></i>
                    대시보드로 돌아가기
                </a>
            </div>
        </div>
    </aside>

    <!-- 우측 사이드바 - 메뉴 -->
    <aside class="sidebar-right" id="sidebar-right">
        <div class="menu-header">
            <i class="fas fa-bars"></i>
            <span>빠른 메뉴</span>
        </div>

        <div class="menu-section">
            <h3>관리</h3>
            <ul class="menu-list">
                <li class="menu-item">
                    <a href="/dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        대시보드
                    </a>
                </li>
                <li class="menu-item">
                    <a href="/dashboard/servers" class="active">
                        <i class="fas fa-server"></i>
                        서버 관리
                    </a>
                </li>
                <li class="menu-item">
                    <a href="/dashboard/db-management">
                        <i class="fas fa-database"></i>
                        DB 관리
                    </a>
                </li>
                <li class="menu-item">
                    <a href="/dashboard/permissions">
                        <i class="fas fa-user-shield"></i>
                        권한 관리
                    </a>
                </li>
            </ul>

            <h3>기타</h3>
            <ul class="menu-list">
                <li class="menu-item">
                    <a href="/auth/logout">
                        <i class="fas fa-sign-out-alt"></i>
                        로그아웃
                    </a>
                </li>
            </ul>
        </div>
    </aside>

    <!-- 메인 콘텐츠 -->
    <div class="main-content">
        <!-- 헤더 -->
        <div class="header">
            <h1>서버 관리</h1>
            <p>봇이 참여한 서버들을 관리하고 설정을 조정합니다.</p>
        </div>

        <!-- 통계 카드 -->
        <div class="stats-cards">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-server"></i>
                </div>
                <div class="stat-value" id="total-servers">0</div>
                <div class="stat-label">전체 서버</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-value" id="total-members">0</div>
                <div class="stat-label">총 멤버 수</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="stat-value" id="active-servers">0</div>
                <div class="stat-label">활성 서버</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-value" id="bot-uptime">0d</div>
                <div class="stat-label">봇 업타임</div>
            </div>
        </div>

        <!-- 서버 목록 섹션 -->
        <div class="servers-section">
            <div class="servers-header">
                <h2 class="section-title">
                    <i class="fas fa-list"></i>
                    내 서버 목록
                </h2>
                <button class="refresh-btn" onclick="loadServers()" id="refresh-btn">
                    <i class="fas fa-sync-alt"></i>
                    <span>새로고침</span>
                </button>
            </div>
            <div class="servers-grid" id="servers-grid">
                <div class="loading">
                    <div class="spinner"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 토스트 알림 -->
    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toast-message">작업이 완료되었습니다.</span>
    </div>

    <!-- JavaScript -->
    <script>
        let currentUser = null;
        let servers = [];

        // 페이지 로드 시 초기화
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('서버 관리 페이지 초기화 시작');
            try {
                await loadUserInfo();
                await loadStats();
                await loadServers();
                console.log('서버 관리 페이지 초기화 완료');
            } catch (error) {
                console.error('페이지 초기화 오류:', error);
                showToast('페이지를 불러오는 중 오류가 발생했습니다.', 'error');
            }
        });

        // 사용자 정보 로드
        async function loadUserInfo() {
            try {
                <% if (user) { %>
                currentUser = <%- JSON.stringify(user) %>;
                document.getElementById('user-name').textContent = currentUser.username;
                document.getElementById('user-role').textContent = currentUser.dashboardRole || 'member';
                document.getElementById('user-avatar').src = currentUser.avatar;
                <% } else { %>
                window.location.href = '/auth/discord';
                <% } %>
            } catch (error) {
                console.error('사용자 정보 로드 실패:', error);
            }
        }

        // 통계 데이터 로드
        async function loadStats() {
            try {
                console.log('API 요청: /dashboard/api/stats');
                const response = await fetch('/dashboard/api/stats');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('통계 데이터:', data);
                
                // 통계 업데이트
                document.getElementById('total-servers').textContent = data.guilds || 0;
                document.getElementById('total-members').textContent = data.users || 0;
                document.getElementById('active-servers').textContent = data.activeGuilds || 0;
                document.getElementById('bot-uptime').textContent = formatUptime(data.uptime || 0);
                
            } catch (error) {
                console.error('통계 로드 실패:', error);
                // 기본값 유지
            }
        }

        // 서버 목록 로드
        async function loadServers() {
            const refreshBtn = document.getElementById('refresh-btn');
            const serversGrid = document.getElementById('servers-grid');
            
            try {
                // 새로고침 버튼 비활성화
                refreshBtn.disabled = true;
                refreshBtn.querySelector('i').style.animation = 'spin 1s linear infinite';
                
                // 로딩 표시
                serversGrid.innerHTML = '<div class="loading"><div class="spinner"></div></div>';
                
                console.log('API 요청: /dashboard/api/servers');
                const response = await fetch('/dashboard/api/servers');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('서버 목록 데이터:', data);
                servers = data.servers || [];
                renderServers(servers);
                
                showToast('서버 목록이 새로고침되었습니다.', 'success');
                
            } catch (error) {
                console.error('서버 목록 로드 실패:', error);
                serversGrid.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>서버 목록을 불러오는데 실패했습니다.<br>API 연결을 확인해주세요.</p>
                        <a href="https://discord.com/api/oauth2/authorize?client_id=YOUR_BOT_ID&permissions=8&scope=bot" 
                           class="invite-btn" target="_blank">
                            <i class="fas fa-plus"></i>
                            봇 초대하기
                        </a>
                    </div>
                `;
            } finally {
                // 새로고침 버튼 활성화
                refreshBtn.disabled = false;
                refreshBtn.querySelector('i').style.animation = '';
            }
        }

        // 서버 목록 렌더링
        function renderServers(serverList) {
            const serversGrid = document.getElementById('servers-grid');
            
            if (!serverList || serverList.length === 0) {
                serversGrid.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-server"></i>
                        <p>봇이 참여한 서버가 없습니다.<br>아래 버튼을 클릭하여 봇을 초대해보세요!</p>
                        <a href="https://discord.com/api/oauth2/authorize?client_id=YOUR_BOT_ID&permissions=8&scope=bot" 
                           class="invite-btn" target="_blank">
                            <i class="fas fa-plus"></i>
                            봇 초대하기
                        </a>
                    </div>
                `;
                return;
            }

            serversGrid.innerHTML = serverList.map(server => `
                <div class="server-card" onclick="openServerDetails('${server.id}')">
                    <div class="server-header">
                        <div class="server-icon">
                            ${server.icon ? 
                                `<img src="https://cdn.discordapp.com/icons/${server.id}/${server.icon}.png" alt="${server.name}">` :
                                `<i class="fas fa-hashtag"></i>`
                            }
                        </div>
                        <div class="server-info">
                            <div class="server-name" title="${server.name}">${server.name}</div>
                            <div class="server-id">${server.id}</div>
                        </div>
                        <div class="server-status ${server.botJoined ? 'joined' : 'not-joined'}">
                            <i class="fas fa-circle"></i>
                            ${server.botJoined ? '참여 중' : '미참여'}
                        </div>
                    </div>
                    
                    <div class="server-stats">
                        <div class="server-stat">
                            <i class="fas fa-users"></i>
                            <span>${server.memberCount || 0}명</span>
                        </div>
                        <div class="server-stat">
                            <i class="fas fa-hashtag"></i>
                            <span>${server.channelCount || 0}개</span>
                        </div>
                        <div class="server-stat">
                            <i class="fas fa-crown"></i>
                            <span>${server.owner ? '관리자' : '멤버'}</span>
                        </div>
                    </div>
                    
                    <div class="server-actions" onclick="event.stopPropagation()">
                        ${server.botJoined ? `
                            <button class="server-btn primary" onclick="manageServer('${server.id}')">
                                <i class="fas fa-cog"></i>
                                관리
                            </button>
                            <button class="server-btn" onclick="viewLogs('${server.id}')">
                                <i class="fas fa-history"></i>
                                로그
                            </button>
                        ` : `
                            <button class="server-btn primary" onclick="inviteBot('${server.id}')">
                                <i class="fas fa-plus"></i>
                                봇 초대
                            </button>
                        `}
                    </div>
                </div>
            `).join('');
        }

        // 서버 상세 정보 열기
        function openServerDetails(serverId) {
            const server = servers.find(s => s.id === serverId);
            if (!server) return;
            
            console.log('서버 상세 정보:', server);
            showToast(`${server.name} 서버 정보를 조회 중...`, 'info');
            
            // 여기에 서버 상세 모달이나 페이지 이동 로직 구현
            // 예: window.open(`/dashboard/servers/${serverId}`, '_blank');
        }

        // 서버 관리
        function manageServer(serverId) {
            const server = servers.find(s => s.id === serverId);
            if (!server) return;
            
            console.log('서버 관리:', server);
            showToast(`${server.name} 서버 관리 기능 준비 중...`, 'info');
            
            // 여기에 서버 관리 기능 구현
        }

        // 서버 로그 보기
        function viewLogs(serverId) {
            const server = servers.find(s => s.id === serverId);
            if (!server) return;
            
            console.log('서버 로그:', server);
            showToast(`${server.name} 서버 로그 조회 중...`, 'info');
            
            // 여기에 로그 조회 기능 구현
        }

        // 봇 초대
        function inviteBot(serverId) {
            const server = servers.find(s => s.id === serverId);
            if (!server) return;
            
            console.log('봇 초대:', server);
            const inviteUrl = `https://discord.com/api/oauth2/authorize?client_id=YOUR_BOT_ID&permissions=8&scope=bot&guild_id=${serverId}`;
            window.open(inviteUrl, '_blank');
            
            showToast(`${server.name} 서버에 봇 초대 링크를 열었습니다.`, 'success');
        }

        // 업타임 포맷팅
        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const mins = Math.floor((seconds % 3600) / 60);
            
            if (days > 0) return `${days}d ${hours}h`;
            if (hours > 0) return `${hours}h ${mins}m`;
            return `${mins}m`;
        }

        // 토스트 알림 표시
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const messageElement = document.getElementById('toast-message');
            const icon = toast.querySelector('i');
            
            messageElement.textContent = message;
            
            // 아이콘 변경
            if (type === 'success') {
                icon.className = 'fas fa-check-circle';
                icon.style.color = 'var(--success)';
            } else if (type === 'error') {
                icon.className = 'fas fa-exclamation-triangle';
                icon.style.color = 'var(--error)';
            } else if (type === 'info') {
                icon.className = 'fas fa-info-circle';
                icon.style.color = 'var(--info)';
            }
            
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // 사이드바 토글 (모바일)
        function toggleSidebar() {
            document.getElementById('sidebar-left').classList.toggle('open');
        }

        function toggleMenu() {
            document.getElementById('sidebar-right').classList.toggle('open');
        }

        // 키보드 이벤트
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                document.getElementById('sidebar-left').classList.remove('open');
                document.getElementById('sidebar-right').classList.remove('open');
            }
        });

        // 주기적 업데이트 (30초마다)
        setInterval(async () => {
            try {
                await loadStats();
            } catch (error) {
                console.error('자동 업데이트 실패:', error);
            }
        }, 30000);
    </script>
</body>
</html>
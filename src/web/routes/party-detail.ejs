<%- contentFor('head') %>
<link rel="stylesheet" href="/css/party-detail.css">

<%- contentFor('body') %>
<div class="content-wrapper">
    <!-- ÌéòÏù¥ÏßÄ Ìó§Îçî -->
    <div class="page-header">
        <div class="header-actions">
            <a href="/party" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i>
                ÌååÌã∞ Î™©Î°ù
            </a>
        </div>
        
        <div class="party-header-info">
            <div class="party-type-badge">
                <span class="party-emoji" id="partyEmoji">üéÆ</span>
                <span class="party-type-name" id="partyTypeName">ÌååÌã∞ ÌÉÄÏûÖ</span>
            </div>
            <div class="party-status-badge" id="partyStatus">
                <span class="status-dot"></span>
                <span class="status-text">ÏÉÅÌÉú</span>
            </div>
        </div>
        
        <h1 class="party-title" id="partyTitle">ÌååÌã∞ Ï†úÎ™©</h1>
        <p class="party-description" id="partyDescription">ÌååÌã∞ ÏÑ§Î™Ö</p>
    </div>

    <!-- ÌååÌã∞ Ï†ïÎ≥¥ ÏÑπÏÖò -->
    <div class="party-info-section">
        <div class="info-grid">
            <!-- Í∏∞Î≥∏ Ï†ïÎ≥¥ -->
            <div class="info-card">
                <h3 class="info-title">
                    <i class="fas fa-info-circle"></i>
                    Í∏∞Î≥∏ Ï†ïÎ≥¥
                </h3>
                <div class="info-content">
                    <div class="info-item">
                        <span class="info-label">Ï£ºÏµúÏûê</span>
                        <span class="info-value" id="hostName">-</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">ÌååÌã∞ ID</span>
                        <span class="info-value" id="partyId">-</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">ÏÉùÏÑ±Ïùº</span>
                        <span class="info-value" id="createdAt">-</span>
                    </div>
                </div>
            </div>
            
            <!-- ÏùºÏ†ï Ï†ïÎ≥¥ -->
            <div class="info-card">
                <h3 class="info-title">
                    <i class="fas fa-calendar-alt"></i>
                    ÏùºÏ†ï Ï†ïÎ≥¥
                </h3>
                <div class="info-content">
                    <div class="info-item">
                        <span class="info-label">ÎÇ†Ïßú</span>
                        <span class="info-value" id="scheduledDate">-</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">ÏãúÍ∞Ñ</span>
                        <span class="info-value" id="scheduledTime">-</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">ÎÇ®ÏùÄ ÏãúÍ∞Ñ</span>
                        <span class="info-value" id="timeRemaining">-</span>
                    </div>
                </div>
            </div>
            
            <!-- ÌåÄ Íµ¨ÏÑ± Ï†ïÎ≥¥ -->
            <div class="info-card">
                <h3 class="info-title">
                    <i class="fas fa-users"></i>
                    ÌåÄ Íµ¨ÏÑ±
                </h3>
                <div class="info-content">
                    <div class="info-item">
                        <span class="info-label">ÌåÄ ÌÅ¨Í∏∞</span>
                        <span class="info-value" id="teamSize">-</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Ï¥ù Ï∞∏Ïó¨Ïûê</span>
                        <span class="info-value" id="totalParticipants">-</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">ÎåÄÍ∏∞Ïûê</span>
                        <span class="info-value" id="waitlistCount">-</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- ÌåÄ Íµ¨ÏÑ± ÏÑπÏÖò -->
    <div class="teams-section">
        <h2 class="section-title">
            <i class="fas fa-users"></i>
            ÌåÄ Íµ¨ÏÑ±
        </h2>
        
        <div class="teams-grid">
            <!-- 1ÌåÄ -->
            <div class="team-card team-1">
                <div class="team-header">
                    <h3>üîµ 1ÌåÄ</h3>
                    <span class="team-count" id="team1Count">0/0</span>
                </div>
                <div class="team-members" id="team1Members">
                    <!-- ÌåÄÏõêÎì§Ïù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
                <div class="team-actions" id="team1Actions">
                    <!-- Ï∞∏Ïó¨ Î≤ÑÌäºÏù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
            </div>
            
            <!-- 2ÌåÄ -->
            <div class="team-card team-2">
                <div class="team-header">
                    <h3>üî¥ 2ÌåÄ</h3>
                    <span class="team-count" id="team2Count">0/0</span>
                </div>
                <div class="team-members" id="team2Members">
                    <!-- ÌåÄÏõêÎì§Ïù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
                <div class="team-actions" id="team2Actions">
                    <!-- Ï∞∏Ïó¨ Î≤ÑÌäºÏù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
            </div>
        </div>
        
        <!-- ÎåÄÍ∏∞Ïûê Î™©Î°ù -->
        <div class="waitlist-section" id="waitlistSection" style="display: none;">
            <div class="team-card waitlist">
                <div class="team-header">
                    <h3>‚è≥ ÎåÄÍ∏∞Ïûê</h3>
                    <span class="team-count" id="waitlistCountDisplay">0</span>
                </div>
                <div class="team-members" id="waitlistMembers">
                    <!-- ÎåÄÍ∏∞ÏûêÎì§Ïù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
            </div>
        </div>
    </div>

    <!-- Ï§ÄÎπÑÎ¨º ÏÑπÏÖò -->
    <div class="preparations-section" id="preparationsSection" style="display: none;">
        <h2 class="section-title">
            <i class="fas fa-list-check"></i>
            Ï§ÄÎπÑÎ¨º
        </h2>
        <div class="preparations-card">
            <div class="preparations-content" id="preparationsContent">
                <!-- Ï§ÄÎπÑÎ¨º ÎÇ¥Ïö©Ïù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
            </div>
        </div>
    </div>

    <!-- ÌååÌã∞ Í¥ÄÎ¶¨ ÏÑπÏÖò (Ï£ºÏµúÏûê/Í¥ÄÎ¶¨ÏûêÎßå) -->
    <div class="party-management-section" id="partyManagementSection" style="display: none;">
        <h2 class="section-title">
            <i class="fas fa-cog"></i>
            ÌååÌã∞ Í¥ÄÎ¶¨
        </h2>
        <div class="management-actions">
            <button class="btn btn-warning" id="editPartyBtn">
                <i class="fas fa-edit"></i>
                ÌååÌã∞ ÏàòÏ†ï
            </button>
            <button class="btn btn-success" id="startPartyBtn">
                <i class="fas fa-play"></i>
                ÌååÌã∞ ÏãúÏûë
            </button>
            <button class="btn btn-primary" id="completePartyBtn">
                <i class="fas fa-flag-checkered"></i>
                ÌååÌã∞ ÏôÑÎ£å
            </button>
            <button class="btn btn-danger" id="cancelPartyBtn">
                <i class="fas fa-times"></i>
                ÌååÌã∞ Ï∑®ÏÜå
            </button>
        </div>
    </div>

    <!-- ÌååÌã∞ Í≤∞Í≥º ÏÑπÏÖò (ÏôÑÎ£åÎêú ÌååÌã∞Îßå) -->
    <div class="party-result-section" id="partyResultSection" style="display: none;">
        <h2 class="section-title">
            <i class="fas fa-trophy"></i>
            ÌååÌã∞ Í≤∞Í≥º
        </h2>
        <div class="result-card" id="resultCard">
            <!-- Í≤∞Í≥º Ï†ïÎ≥¥Í∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
        </div>
    </div>
</div>

<!-- Î™®Îã¨Îì§ -->
<%- include('../partials/modals') %>

<!-- ÌååÌã∞ ÏôÑÎ£å Î™®Îã¨ -->
<div class="modal" id="completePartyModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">ÌååÌã∞ ÏôÑÎ£å</h3>
            <button class="modal-close" onclick="closeModal('completePartyModal')">&times;</button>
        </div>
        <div class="modal-body">
            <form id="completePartyForm">
                <div class="form-group">
                    <label class="form-label">ÏäπÎ¶¨ ÌåÄ</label>
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="winner" value="team1" required>
                            <span>1ÌåÄ ÏäπÎ¶¨</span>
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="winner" value="team2" required>
                            <span>2ÌåÄ ÏäπÎ¶¨</span>
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="winner" value="draw" required>
                            <span>Î¨¥ÏäπÎ∂Ä</span>
                        </label>
                    </div>
                </div>
                
                <div class="score-section">
                    <div class="form-group">
                        <label for="team1Score" class="form-label">1ÌåÄ Ï†êÏàò</label>
                        <input type="number" id="team1Score" name="team1Score" class="form-input" min="0" value="0">
                    </div>
                    <div class="form-group">
                        <label for="team2Score" class="form-label">2ÌåÄ Ï†êÏàò</label>
                        <input type="number" id="team2Score" name="team2Score" class="form-input" min="0" value="0">
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('completePartyModal')">Ï∑®ÏÜå</button>
                    <button type="submit" class="btn btn-primary">ÏôÑÎ£å Ï≤òÎ¶¨</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Ï†ÑÏó≠ Î≥ÄÏàò
window.partyDetailData = {
    party: null,
    currentUser: null,
    isHost: false,
    isAdmin: false,
    userParticipation: null
};

// ÏÑúÎ≤ÑÏóêÏÑú Ï†ÑÎã¨Îêú Îç∞Ïù¥ÌÑ∞
window.partyDetailData.party = <%- JSON.stringify(party) %>;
window.partyDetailData.currentUser = <%- JSON.stringify(user) %>;

// ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
    initializePartyDetail();
});

// ÌååÌã∞ ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
function initializePartyDetail() {
    const party = window.partyDetailData.party;
    const user = window.partyDetailData.currentUser;
    
    if (!party || !user) {
        window.toast.error('ÌååÌã∞ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
    }
    
    // Í∂åÌïú ÌôïÏù∏
    window.partyDetailData.isHost = party.hostId === user.id;
    window.partyDetailData.isAdmin = ['admin', 'subadmin'].includes(user.dashboardRole);
    
    // ÏÇ¨Ïö©Ïûê Ï∞∏Ïó¨ ÏÉÅÌÉú ÌôïÏù∏
    checkUserParticipation();
    
    // UI Î†åÎçîÎßÅ
    renderPartyInfo();
    renderTeams();
    renderPreparations();
    renderManagementSection();
    renderResult();
    
    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    setupEventListeners();
    
    // Ï£ºÍ∏∞Ï†Å ÏóÖÎç∞Ïù¥Ìä∏ (30Ï¥àÎßàÎã§)
    setInterval(refreshPartyData, 30000);
    
    // ÎÇ®ÏùÄ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (1Ï¥àÎßàÎã§)
    setInterval(updateTimeRemaining, 1000);
}

// ÏÇ¨Ïö©Ïûê Ï∞∏Ïó¨ ÏÉÅÌÉú ÌôïÏù∏
function checkUserParticipation() {
    const party = window.partyDetailData.party;
    const userId = window.partyDetailData.currentUser.id;
    
    // 1ÌåÄ ÌôïÏù∏
    const team1Member = party.team1.find(member => member.userId === userId);
    if (team1Member) {
        window.partyDetailData.userParticipation = { team: 1, member: team1Member };
        return;
    }
    
    // 2ÌåÄ ÌôïÏù∏
    const team2Member = party.team2.find(member => member.userId === userId);
    if (team2Member) {
        window.partyDetailData.userParticipation = { team: 2, member: team2Member };
        return;
    }
    
    // ÎåÄÍ∏∞Ïûê ÌôïÏù∏
    const waitlistMember = party.waitlist.find(member => member.userId === userId);
    if (waitlistMember) {
        window.partyDetailData.userParticipation = { team: 'waitlist', member: waitlistMember };
        return;
    }
    
    window.partyDetailData.userParticipation = null;
}

// ÌååÌã∞ Ï†ïÎ≥¥ Î†åÎçîÎßÅ
function renderPartyInfo() {
    const party = window.partyDetailData.party;
    
    const typeEmojis = {
        'Ï†ïÍ∑úÏ†Ñ': '‚öîÔ∏è',
        'Î™®ÏùòÏ†Ñ': 'üõ°Ô∏è',
        'ÌõàÎ†®': 'üéØ',
        'PVP': 'üèÜ',
        'Í≤ÄÏùÄÎ∞úÌÜ±': 'ü¶Ö',
        'Î†àÏù¥Îìú': 'üèúÔ∏è'
    };
    
    const statusTexts = {
        'recruiting': 'Î™®Ïßë Ï§ë',
        'in_progress': 'ÏßÑÌñâ Ï§ë',
        'completed': 'ÏôÑÎ£åÎê®',
        'cancelled': 'Ï∑®ÏÜåÎê®'
    };
    
    const statusColors = {
        'recruiting': 'success',
        'in_progress': 'warning',
        'completed': 'secondary',
        'cancelled': 'danger'
    };
    
    // Ìó§Îçî Ï†ïÎ≥¥
    document.getElementById('partyEmoji').textContent = typeEmojis[party.type] || 'üéÆ';
    document.getElementById('partyTypeName').textContent = party.type;
    document.getElementById('partyTitle').textContent = party.title;
    document.getElementById('partyDescription').textContent = party.description || '';
    
    // ÏÉÅÌÉú Î∞∞ÏßÄ
    const statusElement = document.getElementById('partyStatus');
    statusElement.className = `party-status-badge status-${statusColors[party.status]}`;
    statusElement.querySelector('.status-text').textContent = statusTexts[party.status];
    
    // Í∏∞Î≥∏ Ï†ïÎ≥¥
    document.getElementById('hostName').textContent = party.hostName;
    document.getElementById('partyId').textContent = party.partyId;
    document.getElementById('createdAt').textContent = new Date(party.createdAt).toLocaleDateString('ko-KR');
    
    // ÏùºÏ†ï Ï†ïÎ≥¥
    const scheduledDate = new Date(party.scheduledDate);
    document.getElementById('scheduledDate').textContent = scheduledDate.toLocaleDateString('ko-KR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        weekday: 'long'
    });
    document.getElementById('scheduledTime').textContent = party.scheduledTime;
    
    // ÌåÄ Íµ¨ÏÑ± Ï†ïÎ≥¥
    document.getElementById('teamSize').textContent = `${party.maxTeamSize}v${party.maxTeamSize}`;
    document.getElementById('totalParticipants').textContent = party.team1.length + party.team2.length;
    document.getElementById('waitlistCount').textContent = party.waitlist.length;
    
    updateTimeRemaining();
}

// ÎÇ®ÏùÄ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
function updateTimeRemaining() {
    const party = window.partyDetailData.party;
    const scheduledDateTime = new Date(`${party.scheduledDate}T${party.scheduledTime}`);
    const now = new Date();
    const timeDiff = scheduledDateTime - now;
    
    let timeText = '';
    if (timeDiff > 0) {
        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (days > 0) {
            timeText = `${days}Ïùº ${hours}ÏãúÍ∞Ñ ÌõÑ`;
        } else if (hours > 0) {
            timeText = `${hours}ÏãúÍ∞Ñ ${minutes}Î∂Ñ ÌõÑ`;
        } else {
            timeText = `${minutes}Î∂Ñ ÌõÑ`;
        }
    } else {
        timeText = 'ÏãúÍ∞Ñ ÏßÄÎÇ®';
    }
    
    document.getElementById('timeRemaining').textContent = timeText;
}

// ÌåÄ Î†åÎçîÎßÅ
function renderTeams() {
    const party = window.partyDetailData.party;
    
    // 1ÌåÄ
    renderTeam(1, party.team1, party.maxTeamSize);
    
    // 2ÌåÄ
    renderTeam(2, party.team2, party.maxTeamSize);
    
    // ÎåÄÍ∏∞Ïûê
    renderWaitlist(party.waitlist);
}

// Í∞úÎ≥Ñ ÌåÄ Î†åÎçîÎßÅ
function renderTeam(teamNumber, members, maxSize) {
    const teamMembersEl = document.getElementById(`team${teamNumber}Members`);
    const teamCountEl = document.getElementById(`team${teamNumber}Count`);
    const teamActionsEl = document.getElementById(`team${teamNumber}Actions`);
    
    // ÌåÄ Ïù∏Ïõê Ïàò ÏóÖÎç∞Ïù¥Ìä∏
    teamCountEl.textContent = `${members.length}/${maxSize}`;
    
    // ÌåÄÏõê Î™©Î°ù Î†åÎçîÎßÅ
    if (members.length === 0) {
        teamMembersEl.innerHTML = '<div class="empty-team">ÌåÄÏõêÏùÑ Î™®Ïßë Ï§ëÏûÖÎãàÎã§</div>';
    } else {
        teamMembersEl.innerHTML = members.map(member => `
            <div class="member-item">
                <div class="member-avatar">
                    <img src="${member.avatar || '/images/default-avatar.png'}" alt="${member.username}">
                </div>
                <div class="member-info">
                    <div class="member-name">${escapeHtml(member.username)}</div>
                    <div class="member-joined">
                        ${new Date(member.joinedAt).toLocaleDateString('ko-KR')}
                    </div>
                </div>
                ${window.partyDetailData.isHost || window.partyDetailData.isAdmin ? `
                    <button class="btn-remove" onclick="removeMember('${member.userId}', ${teamNumber})" title="ÌåÄÏóêÏÑú Ï†úÍ±∞">
                        <i class="fas fa-times"></i>
                    </button>
                ` : ''}
            </div>
        `).join('');
    }
    
    // ÌåÄ Ï∞∏Ïó¨ Î≤ÑÌäº Î†åÎçîÎßÅ
    renderTeamActions(teamNumber, members, maxSize);
}

// ÌåÄ Ïï°ÏÖò Î≤ÑÌäº Î†åÎçîÎßÅ
function renderTeamActions(teamNumber, members, maxSize) {
    const party = window.partyDetailData.party;
    const teamActionsEl = document.getElementById(`team${teamNumber}Actions`);
    const userParticipation = window.partyDetailData.userParticipation;
    
    if (party.status !== 'recruiting') {
        teamActionsEl.innerHTML = '';
        return;
    }
    
    let actionHTML = '';
    
    if (!userParticipation) {
        // Ï∞∏Ïó¨ÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        if (members.length < maxSize) {
            actionHTML = `
                <button class="btn btn-primary btn-join" onclick="joinTeam(${teamNumber})">
                    <i class="fas fa-plus"></i>
                    ${teamNumber}ÌåÄ Ï∞∏Ïó¨
                </button>
            `;
        } else {
            actionHTML = `
                <button class="btn btn-secondary btn-waitlist" onclick="joinWaitlist()">
                    <i class="fas fa-clock"></i>
                    ÎåÄÍ∏∞Ïó¥ Ï∞∏Ïó¨
                </button>
            `;
        }
    } else if (userParticipation.team === teamNumber) {
        // ÌòÑÏû¨ ÌåÄÏóê Ï∞∏Ïó¨ Ï§ëÏù∏ Í≤ΩÏö∞
        actionHTML = `
            <button class="btn btn-danger btn-leave" onclick="leaveTeam()">
                <i class="fas fa-minus"></i>
                ÌåÄ ÌÉàÌá¥
            </button>
        `;
    } else if (userParticipation.team !== 'waitlist') {
        // Îã§Î•∏ ÌåÄÏóê Ï∞∏Ïó¨ Ï§ëÏù∏ Í≤ΩÏö∞
        if (members.length < maxSize) {
            actionHTML = `
                <button class="btn btn-outline btn-switch" onclick="switchTeam(${teamNumber})">
                    <i class="fas fa-exchange-alt"></i>
                    ${teamNumber}ÌåÄÏúºÎ°ú Ïù¥Îèô
                </button>
            `;
        }
    }
    
    teamActionsEl.innerHTML = actionHTML;
}

// ÎåÄÍ∏∞Ïûê Î†åÎçîÎßÅ
function renderWaitlist(waitlist) {
    const waitlistSection = document.getElementById('waitlistSection');
    const waitlistMembers = document.getElementById('waitlistMembers');
    const waitlistCount = document.getElementById('waitlistCountDisplay');
    
    if (waitlist.length === 0) {
        waitlistSection.style.display = 'none';
        return;
    }
    
    waitlistSection.style.display = 'block';
    waitlistCount.textContent = waitlist.length;
    
    waitlistMembers.innerHTML = waitlist.map((member, index) => `
        <div class="member-item waitlist-member">
            <div class="waitlist-position">${index + 1}</div>
            <div class="member-avatar">
                <img src="${member.avatar || '/images/default-avatar.png'}" alt="${member.username}">
            </div>
            <div class="member-info">
                <div class="member-name">${escapeHtml(member.username)}</div>
                <div class="member-joined">
                    ${new Date(member.joinedAt).toLocaleDateString('ko-KR')}
                </div>
            </div>
            ${window.partyDetailData.isHost || window.partyDetailData.isAdmin ? `
                <button class="btn-remove" onclick="removeMember('${member.userId}', 'waitlist')" title="ÎåÄÍ∏∞Ïó¥ÏóêÏÑú Ï†úÍ±∞">
                    <i class="fas fa-times"></i>
                </button>
            ` : ''}
        </div>
    `).join('');
}

// Ï§ÄÎπÑÎ¨º Î†åÎçîÎßÅ
function renderPreparations() {
    const party = window.partyDetailData.party;
    const preparationsSection = document.getElementById('preparationsSection');
    const preparationsContent = document.getElementById('preparationsContent');
    
    if (!party.preparations) {
        preparationsSection.style.display = 'none';
        return;
    }
    
    preparationsSection.style.display = 'block';
    preparationsContent.innerHTML = `<p>${escapeHtml(party.preparations).replace(/\n/g, '<br>')}</p>`;
}

// Í¥ÄÎ¶¨ ÏÑπÏÖò Î†åÎçîÎßÅ
function renderManagementSection() {
    const party = window.partyDetailData.party;
    const managementSection = document.getElementById('partyManagementSection');
    
    if (!window.partyDetailData.isHost && !window.partyDetailData.isAdmin) {
        managementSection.style.display = 'none';
        return;
    }
    
    managementSection.style.display = 'block';
    
    // Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    const editBtn = document.getElementById('editPartyBtn');
    const startBtn = document.getElementById('startPartyBtn');
    const completeBtn = document.getElementById('completePartyBtn');
    const cancelBtn = document.getElementById('cancelPartyBtn');
    
    // ÌååÌã∞ ÏÉÅÌÉúÏóê Îî∞Î•∏ Î≤ÑÌäº ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
    switch (party.status) {
        case 'recruiting':
            editBtn.disabled = false;
            startBtn.disabled = false;
            completeBtn.disabled = true;
            cancelBtn.disabled = false;
            break;
        case 'in_progress':
            editBtn.disabled = true;
            startBtn.disabled = true;
            completeBtn.disabled = false;
            cancelBtn.disabled = false;
            break;
        case 'completed':
        case 'cancelled':
            editBtn.disabled = true;
            startBtn.disabled = true;
            completeBtn.disabled = true;
            cancelBtn.disabled = true;
            break;
    }
}

// Í≤∞Í≥º Î†åÎçîÎßÅ
function renderResult() {
    const party = window.partyDetailData.party;
    const resultSection = document.getElementById('partyResultSection');
    const resultCard = document.getElementById('resultCard');
    
    if (party.status !== 'completed' || !party.result) {
        resultSection.style.display = 'none';
        return;
    }
    
    resultSection.style.display = 'block';
    
    const result = party.result;
    const winnerText = result.winner === 'team1' ? '1ÌåÄ ÏäπÎ¶¨' : 
                     result.winner === 'team2' ? '2ÌåÄ ÏäπÎ¶¨' : 'Î¨¥ÏäπÎ∂Ä';
    
    resultCard.innerHTML = `
        <div class="result-header">
            <h3>${winnerText}</h3>
            ${result.team1Score !== undefined && result.team2Score !== undefined ? 
                `<div class="score">
                    <span class="team1-score">${result.team1Score}</span>
                    <span class="vs">:</span>
                    <span class="team2-score">${result.team2Score}</span>
                </div>` : ''
            }
        </div>
        <div class="result-info">
            <p><strong>ÏôÑÎ£å Ï≤òÎ¶¨Ïûê:</strong> ${escapeHtml(result.completedBy)}</p>
            <p><strong>ÏôÑÎ£å ÏãúÍ∞Ñ:</strong> ${new Date(result.completedAt).toLocaleString('ko-KR')}</p>
        </div>
    `;
}

// Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
function setupEventListeners() {
    // ÌååÌã∞ Í¥ÄÎ¶¨ Î≤ÑÌäºÎì§
    document.getElementById('editPartyBtn').addEventListener('click', editParty);
    document.getElementById('startPartyBtn').addEventListener('click', startParty);
    document.getElementById('completePartyBtn').addEventListener('click', () => openModal('completePartyModal'));
    document.getElementById('cancelPartyBtn').addEventListener('click', cancelParty);
    
    // ÌååÌã∞ ÏôÑÎ£å Ìèº
    document.getElementById('completePartyForm').addEventListener('submit', completeParty);
}

// ÌåÄ Ï∞∏Ïó¨
async function joinTeam(teamNumber) {
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/join`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ team: teamNumber })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success(`${teamNumber}ÌåÄÏóê Ï∞∏Ïó¨ÌñàÏäµÎãàÎã§!`);
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÌåÄ Ï∞∏Ïó¨ Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÎåÄÍ∏∞Ïó¥ Ï∞∏Ïó¨
async function joinWaitlist() {
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/join`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ team: 'waitlist' })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success('ÎåÄÍ∏∞Ïó¥Ïóê Ï∞∏Ïó¨ÌñàÏäµÎãàÎã§!');
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÎåÄÍ∏∞Ïó¥ Ï∞∏Ïó¨ Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÌåÄ ÌÉàÌá¥
async function leaveTeam() {
    if (!confirm('Ï†ïÎßêÎ°ú ÌåÄÏóêÏÑú ÌÉàÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
    
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/leave`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success('ÌåÄÏóêÏÑú ÌÉàÌá¥ÌñàÏäµÎãàÎã§.');
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÌåÄ ÌÉàÌá¥ Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÌåÄ Î≥ÄÍ≤Ω
async function switchTeam(teamNumber) {
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/join`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ team: teamNumber })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success(`${teamNumber}ÌåÄÏúºÎ°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§!`);
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÌåÄ Î≥ÄÍ≤Ω Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// Î©§Î≤Ñ Ï†úÍ±∞ (Ï£ºÏµúÏûê/Í¥ÄÎ¶¨ÏûêÎßå)
async function removeMember(userId, team) {
    if (!confirm('Ï†ïÎßêÎ°ú Ïù¥ ÏÇ¨Ïö©ÏûêÎ•º Ï†úÍ±∞ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;
    
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/remove`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, team })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success('ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§.');
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('Î©§Î≤Ñ Ï†úÍ±∞ Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÌååÌã∞ ÏàòÏ†ï
function editParty() {
    window.toast.info('ÌååÌã∞ ÏàòÏ†ï Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
}

// ÌååÌã∞ ÏãúÏûë
async function startParty() {
    if (!confirm('ÌååÌã∞Î•º ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå? ÏãúÏûë ÌõÑÏóêÎäî ÏÉàÎ°úÏö¥ Ï∞∏Ïó¨ÏûêÍ∞Ä Îì§Ïñ¥Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.')) return;
    
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/start`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success('ÌååÌã∞Í∞Ä ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!');
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÌååÌã∞ ÏãúÏûë Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÌååÌã∞ ÏôÑÎ£å
async function completeParty(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const data = {
        action: 'complete',
        winner: formData.get('winner'),
        team1Score: parseInt(formData.get('team1Score')) || 0,
        team2Score: parseInt(formData.get('team2Score')) || 0
    };
    
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/end`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success('ÌååÌã∞Í∞Ä ÏôÑÎ£å Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§!');
            closeModal('completePartyModal');
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÌååÌã∞ ÏôÑÎ£å Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÌååÌã∞ Ï∑®ÏÜå
async function cancelParty() {
    if (!confirm('Ï†ïÎßêÎ°ú ÌååÌã∞Î•º Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) return;
    
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}/end`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ action: 'cancel' })
        });
        
        const result = await response.json();
        
        if (response.ok) {
            window.toast.success('ÌååÌã∞Í∞Ä Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
            await refreshPartyData();
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('ÌååÌã∞ Ï∑®ÏÜå Ïò§Î•ò:', error);
        window.toast.error(error.message);
    }
}

// ÌååÌã∞ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
async function refreshPartyData() {
    try {
        const response = await fetch(`/party/api/${window.partyDetailData.party.partyId}`);
        if (!response.ok) throw new Error('ÌååÌã∞ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
        
        const updatedParty = await response.json();
        window.partyDetailData.party = updatedParty;
        
        // ÏÇ¨Ïö©Ïûê Ï∞∏Ïó¨ ÏÉÅÌÉú Ïû¨ÌôïÏù∏
        checkUserParticipation();
        
        // UI Îã§Ïãú Î†åÎçîÎßÅ
        renderPartyInfo();
        renderTeams();
        renderManagementSection();
        renderResult();
        
    } catch (error) {
        console.error('ÌååÌã∞ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ïò§Î•ò:', error);
    }
}

// Î™®Îã¨ Ïó¥Í∏∞/Îã´Í∏∞
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.style.display = 'block';
    document.body.style.overflow = 'hidden';
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
}

// HTML Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
window.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal')) {
        const modalId = event.target.id;
        closeModal(modalId);
    }
});
</script>

<style>
/* ÌååÌã∞ ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Ïä§ÌÉÄÏùº */
.content-wrapper {
    padding: 24px;
    max-width: 1200px;
    margin: 0 auto;
}

/* ÌéòÏù¥ÏßÄ Ìó§Îçî */
.page-header {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 32px;
    margin-bottom: 32px;
    text-align: center;
    position: relative;
}

.header-actions {
    position: absolute;
    top: 20px;
    left: 20px;
}

.party-header-info {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-bottom: 24px;
}

.party-type-badge {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: var(--accent-primary);
    color: white;
    border-radius: 20px;
    font-weight: 500;
}

.party-emoji {
    font-size: 20px;
}

.party-status-badge {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px 12px;
    border-radius: 16px;
    font-size: 14px;
    font-weight: 500;
}

.party-status-badge .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
}

.status-success {
    background: rgba(59, 165, 92, 0.2);
    color: var(--success);
}

.status-success .status-dot {
    background: var(--success);
}

.status-warning {
    background: rgba(250, 166, 26, 0.2);
    color: var(--warning);
}

.status-warning .status-dot {
    background: var(--warning);
}

.status-secondary {
    background: rgba(116, 127, 141, 0.2);
    color: var(--text-secondary);
}

.status-secondary .status-dot {
    background: var(--text-secondary);
}

.status-danger {
    background: rgba(237, 66, 69, 0.2);
    color: var(--danger);
}

.status-danger .status-dot {
    background: var(--danger);
}

.party-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 12px;
    color: var(--text-primary);
}

.party-description {
    font-size: 1.1rem;
    color: var(--text-secondary);
    line-height: 1.6;
    max-width: 800px;
    margin: 0 auto;
}

/* Ï†ïÎ≥¥ ÏÑπÏÖò */
.party-info-section {
    margin-bottom: 32px;
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.info-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 24px;
}

.info-title {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 16px;
}

.info-title i {
    color: var(--accent-primary);
}

.info-content {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid var(--border-color);
}

.info-item:last-child {
    border-bottom: none;
}

.info-label {
    font-size: 14px;
    color: var(--text-secondary);
}

.info-value {
    font-weight: 500;
    color: var(--text-primary);
}

/* ÏÑπÏÖò ÌÉÄÏù¥ÌãÄ */
.section-title {
    display: flex;
    align-items: center;
    gap: 12px;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 24px;
}

.section-title i {
    color: var(--accent-primary);
}

/* ÌåÄ ÏÑπÏÖò */
.teams-section {
    margin-bottom: 32px;
}

.teams-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 24px;
    margin-bottom: 24px;
}

.team-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
}

.team-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    background: var(--bg-tertiary);
    border-bottom: 1px solid var(--border-color);
}

.team-header h3 {
    margin: 0;
    font-size: 1.2rem;
    color: var(--text-primary);
}

.team-count {
    font-weight: 600;
    color: var(--accent-primary);
}

.team-members {
    padding: 16px;
    min-height: 200px;
}

.empty-team {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 160px;
    color: var(--text-muted);
    text-align: center;
    border: 2px dashed var(--border-color);
    border-radius: 8px;
}

.member-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: var(--bg-tertiary);
    border-radius: 8px;
    margin-bottom: 8px;
    position: relative;
}

.member-item:last-child {
    margin-bottom: 0;
}

.waitlist-position {
    width: 24px;
    height: 24px;
    background: var(--accent-primary);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: 600;
}

.member-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid var(--border-color);
}

.member-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.member-info {
    flex: 1;
}

.member-name {
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 2px;
}

.member-joined {
    font-size: 12px;
    color: var(--text-muted);
}

.btn-remove {
    position: absolute;
    top: 8px;
    right: 8px;
    width: 24px;
    height: 24px;
    border: none;
    background: var(--danger);
    color: white;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    opacity: 0;
    transition: opacity 0.2s;
}

.member-item:hover .btn-remove {
    opacity: 1;
}

.team-actions {
    padding: 16px;
    border-top: 1px solid var(--border-color);
}

.team-actions .btn {
    width: 100%;
}

/* ÎåÄÍ∏∞Ïûê ÏÑπÏÖò */
.waitlist-section {
    margin-top: 24px;
}

.waitlist .team-header {
    background: rgba(250, 166, 26, 0.1);
}

/* Ï§ÄÎπÑÎ¨º ÏÑπÏÖò */
.preparations-section {
    margin-bottom: 32px;
}

.preparations-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 24px;
}

.preparations-content p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
}

/* Í¥ÄÎ¶¨ ÏÑπÏÖò */
.party-management-section {
    margin-bottom: 32px;
}

.management-actions {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
}

.management-actions .btn {
    flex: 1;
    min-width: 140px;
}

/* Í≤∞Í≥º ÏÑπÏÖò */
.party-result-section {
    margin-bottom: 32px;
}

.result-card {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 24px;
}

.result-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.result-header h3 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--text-primary);
}

.score {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 1.5rem;
    font-weight: 700;
}

.team1-score {
    color: #5865F2;
}

.team2-score {
    color: #ED4245;
}

.vs {
    color: var(--text-muted);
}

.result-info {
    color: var(--text-secondary);
    line-height: 1.6;
}

.result-info p {
    margin: 8px 0;
}

/* Î™®Îã¨ */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
}

.modal-content {
    background-color: var(--bg-primary);
    margin: 5% auto;
    padding: 0;
    border-radius: 12px;
    border: 1px solid var(--border-color);
    width: 90%;
    max-width: 500px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid var(--border-color);
}

.modal-title {
    margin: 0;
    color: var(--text-primary);
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-body {
    padding: 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--text-primary);
}

.radio-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.radio-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    color: var(--text-primary);
}

.score-section {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
}

.form-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--border-color);
    border-radius: 6px;
    background: var(--bg-secondary);
    color: var(--text-primary);
}

.modal-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 24px;
}

/* Î∞òÏùëÌòï */
@media (max-width: 768px) {
    .party-header-info {
        flex-direction: column;
        gap: 12px;
    }
    
    .header-actions {
        position: static;
        margin-bottom: 16px;
    }
    
    .info-grid {
        grid-template-columns: 1fr;
    }
    
    .teams-grid {
        grid-template-columns: 1fr;
    }
    
    .management-actions {
        flex-direction: column;
    }
    
    .result-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
    }
    
    .modal-actions {
        flex-direction: column;
    }
    
    .score-section {
        grid-template-columns: 1fr;
    }
}
</style>